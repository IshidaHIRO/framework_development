#+STARTUP: latexpreview

#+OPTIONS: H:3
#+OPTIONS: toc:nil
#+OPTIONS: ^:nil
#+OPTIONS: *:t

#+BEAMER_THEME: Berkeley
#+BEAMER_COLOR_THEME: seahorse
#+BEAMER_INNER_THEME: rectangles

#+LATEX_CLASS: beamer_lecture
#+LaTeX_CLASS_OPTIONS: [t, aspectratio=169]

#+TITLE: フレームワーク開発特論
#+AUTHOR: 中鉢 欣秀
#+DATE: 

#+LATEX_HEADER: \institute[AIIT]{産業技術大学院大学(AIIT)}

* 第1章 この授業について
** 導入
*** はじめに
**** 自己紹介
     - [[https://github.com/ychubachi/enpit/blob/master/slides/self_introduction.org][enpit/self_introduction.org at master · ychubachi/enpit]]
**** シラバス
     - [[http://aiit.ac.jp/master_program/isa/lecture/pdf/h26/4_6.pdf][フレームワーク開発特論]]
**** ハンドアウト
     - [[https://github.com/ychubachi/framework_development/blob/master/slides/framework_development.org][framework_development/framework_development.org at master · ychubachi/framework_development]]
*** 授業の計画
**** スケジュールの調整
     - 基本的にはシラバス通りに行うが，
       本年度から内容を刷新して新規に行う授業のため
       計画の変更がありえる
#     - Gitは第9回に予定しているが，前倒しする予定
**** 休講・補講
     - 10/9（木） ビデオ視聴（休講）

** 学習目的・目標
*** この授業の目的
    - 再利用可能なコンポーネント開発の概念的理解を行う
    - RubyのGemを題材に，実装技術を学ぶ
*** この授業の目標
    - Rubyで実際にコーデングを行い，コンポーネントを開発できる
    - Git/GitHubを用い，開発の効率の向上・成果物の公開などができる
    - Rubyのテスト技術について学ぶ
    - RubyGemsに公開する方法

** 授業の方法
*** この授業で用いる資料
    - この授業で取り上げる資料は，開発コミュニティが公開している
      Webページを中心に適宜紹介する
    - エンジニアは英語の原典を読めなくてはならないので，英語のページ
      を見ながら解説する
    - スライド・ハンドアウトは適宜更新するので，
      必要に応じてダウンロードすること

*** Git/GitHubの活用
    - GitHubのアカウントを作成しておくこと
    - ソースコードを作成する課題は，GitHubにも登録してもらうことがある

*** 仮想化環境の準備
  - Rubyの開発環境
    - enPiTの仮想環境を利用
  - インストールの方法
    - 資料
      - [[https://github.com/ychubachi/enpit/blob/master/slides/preparation.org][enpit/preparation.org at master · ychubachi/enpit]]
    - 動画を参照
      - http://youtu.be/kePqg8dCgJM
    - 注意
      - 動画の視聴及び作業のために2時間程度かかる

*** 仮想化環境の設定
**** 内容
     - enPiT用に作成したVagrantのboxファイルの入手して
       実行できるようにする
     - Vagrantのバージョンは最新版にしておく
     - Vagrantのインストール後，次のコマンドでインストール可能

**** コマンド
#+begin_src bash
vagrant init ychubachi/enpit
#+end_src

** RubyのGemとは
*** Rubyによるコンポーネント
    - Rubyには，再利用可能なコンポーネントを
      取り扱う仕組みとしてGemがある
    - 資料
      - [[http://guides.rubygems.org/][RubyGems Guides]]
*** 基本的なコマンド
    - =gem= コマンドは，Rubyでコンポーネントを開発したり，
      配布をしたりする等の際に利用するコマンド
    - 後に解説する =bundler= コマンドの基盤
    - 資料
      - [[http://guides.rubygems.org/rubygems-basics/][RubyGems Basics - RubyGems Guides]]
** 演習課題
*** 課題1-1
**** 開発環境の構築
     - 演習用仮想化環境を用意する
     - 資料と動画を参照
**** 作業内容
     - VirtualBox と Vagrantをインストールする
       - [[https://www.virtualbox.org/][Oracle VM VirtualBox]]
       - [[https://www.vagrantup.com/][Vagrant]]
*** 課題1-2
**** 開発環境の構築
     - enPiT仮想化環境をインストールする
**** コマンド
     
#+begin_src bash
vagrant init ychubachi/enpit
vagrant up
vagrant ssh
#+end_src

*** 課題1-3
**** RubyGems Basics
     - 下記のガイドに記されたサンプルを実行し，
       =gem= コマンドの基本的な使い方を学ぶ
**** ガイド
     - [[http://guides.rubygems.org/rubygems-basics/][RubyGems Basics - RubyGems Guides]]
*** 課題1-4
**** 演習
     - gemをダウンロードして中身を見てみる
     - =search=, =fetch=,  =unpack= などのコマンドを活用する
* 第2章 RubyGemsの概要と周辺のツール群
** RubyGemsの解説(1)
*** Ruby Gemsのガイド
    - [[http://guides.rubygems.org/what-is-a-gem/][What is a gem? - RubyGems Guides]]
    - [[http://guides.rubygems.org/make-your-own-gem/][Make your own gem - RubyGems Guides]]
    - [[http://guides.rubygems.org/gems-with-extensions/][Gems with Extensions - RubyGems Guides]]
      - C言語拡張（省略）
** RubyGemsの解説(2)
*** Ruby Gemsのガイド
    - [[http://guides.rubygems.org/name-your-gem/][Name your gem - RubyGems Guides]]
    - [[http://guides.rubygems.org/publishing/][Publishing your gem - RubyGems Guides]]
    - [[http://guides.rubygems.org/security/][Security - RubyGems Guides]]
      - セキュリティ（省略）
    - [[http://guides.rubygems.org/patterns/][Patterns - RubyGems Guides]]
** 補足
*** MiniTest
    - [[http://docs.ruby-lang.org/ja/2.0.0/library/minitest=2funit.html][library minitest/unit]]
** 演習課題
*** 課題2-1 RubyGems.orgにアカウントを作成
     - RubyGems.orgにアカウントを作成しなさい
     - [[https://rubygems.org/][RubyGems.org | your community gem host]]
       - 「sign up」リンクから作成する
*** 課題2-2 ガイドを参考にGemを作る
     - ガイドの解説に従い，"hola" Gemを作成しなさい
       - [[http://guides.rubygems.org/make-your-own-gem/][Make your own gem - RubyGems Guides]]
     - 演習用Gemの名前の付け方
       - hola_(username)
       - 括弧内はRubyGemsのユーザ名に置き換えよ
* 第3章 Ruby自体のバージョン管理
** Rbenvの解説
*** Rubyのバージョン
     - Rubyには様々なバージョンがある
       - 最新の安定版: Ruby 2.1.3
       - 前世代の安定版: Ruby 2.0.0-p576
       - 古い安定版: Ruby 1.9.3-p547
       - 1.8.7，1.9.2はサポート終了
     - これら以外にも，Javaや.NET Framework上で動作するものなど多数．
*** 開発時の混乱
    - 開発プロジェクトによって，異なるバージョンのRubyが用いられる
    - 複数の開発プロジェクトに参加する開発者が，
      毎回手動でバージョンを変更するのは困難であるし，
      トラブルの原因となる
*** Rbenvについて
**** 概要
     - バージョンの異なる複数のRubyを管理するツールであり，
       主要なエコシステムの一部
     - プラグインを追加することで，インストールも自動化できる
**** GitHub
    - [[https://github.com/sstephenson/rbenv][sstephenson/rbenv]]
**** RVMとの比較
    - [[https://github.com/sstephenson/rbenv/wiki/Why-rbenv%3F][Why rbenv? · sstephenson/rbenv Wiki]]
** 演習課題
*** 課題3-1 別なRubyバージョンのインストール
     - =rbenv= を用いて，異なるバージョンのRubyをインストールする
*** 課題3-2 Rubyのバージョンを切り替える
    - =rbenv= を用い，=ruby= のバージョンを切り替える
* 第4章 プロジェクトで利用するGemの管理
** プロジェクトとGem
*** プロジェクトごとに異なるGemの集合
    - 開発プロジェクトにおいて利用するGemは異なるばかりではなく，
      Gemのバージョンについても注意が必要である
    - Gemコマンドを直接用いてインストールする方法では，
      必要なGemを主導で管理しなくてはならないし，
      バージョンの異なるGemを用いる場合もある
** Bundlerの解説
*** Bundlerについて
    - [[http://bundler.io/][Bundler: The best way to manage a Ruby application's gems]]
*** ドキュメントの解説
    - [[http://bundler.io/rationale.html][Why Bundler exists]]
    - [[https://github.com/sstephenson/rbenv/wiki/Understanding-binstubs][Understanding binstubs · sstephenson/rbenv Wiki]]
    - [[http://bundler.io/gemfile.html][Gemfile]]
*** bundleコマンドのインストール
**** bundleコマンド
     - =gem= と違い， =bundle= コマンドは標準ではインストールされていない．
**** Gemによるインストール方法
#+begin_src bash
gem install bundler
#+end_src
    
*** BundlerによるGemの作成
**** ひな形の自動生成
    - [[http://bundler.io/v1.7/bundle_gem.html][Bundler: The best way to manage a Ruby application's gems]]
**** コマンド
#+begin_src bash
bundle gem my_gem_name
#+end_src

** 演習課題
*** 4-1 Bundlerで簡単なGemを作ってみる
**** 課題
     - 簡単な計算を行うコマンドをGemとして作成しなさい．
**** 例
     - 生年月日と今の年月日から年齢を計算する
     - 身長と体重を入力して，BMIを出す
     - その他，各自で考えよ
*** 4-2 作成したGemをGitHubで公開する
**** 課題
    - 作成したGemのソースコードをGitHubに公開しなさい
      - =git add= ， =git commit= でコミット
      - =hub create= でGitHubのリポジトリを作成
      - =git push origin master= でGitHubに登録
**** 提出
    - GitHubのURLをLMSに提出する
* COMMENT 第5章 Rake
*** Rake
    - [[https://github.com/jimweirich/rake][jimweirich/rake]]
* COMMENT Memo
** 演習課題
**** 演習
       - 演習
	 - Gemを生成する
	   - 生成された内容を調べる
	   - Rakeの使い方
	 - その後，テストの話をする

* COMMENT 第3章 Rubyによる単体テスト
*** Memo
    - 簡単なコードでテストを通す

* COMMENT 第4章 Rubyによる統合テスト
* COMMENT 第5章 GitHubによるコードの共有
* COMMENT 第6章 CIツールによるテスト自動化
* COMMENT 第7章 まとめ
* COMMENT Memo
  - [[http://atodekaku.tumblr.com/post/33835003602/gem-2012-10-14-sun][デザイナーの為のgem作成勉強会に参加しました = 2012.10.14.Sun • FIXME]]
  - [[https://rubygems.org/][RubyGems.org | your community gem host]]
  - 魔法などどこにもない！
  - 英語の原点に慣れ親しもう
  - このページの解説
    - [[http://guides.rubygems.org/rubygems-basics/][RubyGems Basics - RubyGems Guides]]
